// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	reviews "alta-airbnb-be/features/reviews"

	mock "github.com/stretchr/testify/mock"

	rooms "alta-airbnb-be/features/rooms"

	url "net/url"
)

// RoomService_ is an autogenerated mock type for the RoomService_ type
type RoomService_ struct {
	mock.Mock
}

// ChangeRoom provides a mock function with given fields: roomEntity
func (_m *RoomService_) ChangeRoom(roomEntity *rooms.RoomEntity) error {
	ret := _m.Called(roomEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rooms.RoomEntity) error); ok {
		r0 = rf(roomEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateReview provides a mock function with given fields: reviewEntity
func (_m *RoomService_) CreateReview(reviewEntity *reviews.ReviewEntity) error {
	ret := _m.Called(reviewEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*reviews.ReviewEntity) error); ok {
		r0 = rf(reviewEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRoom provides a mock function with given fields: roomEntity
func (_m *RoomService_) CreateRoom(roomEntity *rooms.RoomEntity) error {
	ret := _m.Called(roomEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rooms.RoomEntity) error); ok {
		r0 = rf(roomEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReviewsByRoomId provides a mock function with given fields: reviewEntity
func (_m *RoomService_) GetReviewsByRoomId(reviewEntity *reviews.ReviewEntity) ([]*reviews.ReviewEntity, error) {
	ret := _m.Called(reviewEntity)

	var r0 []*reviews.ReviewEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(*reviews.ReviewEntity) ([]*reviews.ReviewEntity, error)); ok {
		return rf(reviewEntity)
	}
	if rf, ok := ret.Get(0).(func(*reviews.ReviewEntity) []*reviews.ReviewEntity); ok {
		r0 = rf(reviewEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*reviews.ReviewEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(*reviews.ReviewEntity) error); ok {
		r1 = rf(reviewEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoomByRoomId provides a mock function with given fields: RoomEntity
func (_m *RoomService_) GetRoomByRoomId(RoomEntity *rooms.RoomEntity) (*rooms.RoomEntity, error) {
	ret := _m.Called(RoomEntity)

	var r0 *rooms.RoomEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(*rooms.RoomEntity) (*rooms.RoomEntity, error)); ok {
		return rf(RoomEntity)
	}
	if rf, ok := ret.Get(0).(func(*rooms.RoomEntity) *rooms.RoomEntity); ok {
		r0 = rf(RoomEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rooms.RoomEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(*rooms.RoomEntity) error); ok {
		r1 = rf(RoomEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRooms provides a mock function with given fields: limit, offset, queryParams
func (_m *RoomService_) GetRooms(limit int, offset int, queryParams url.Values) ([]*rooms.RoomEntity, error) {
	ret := _m.Called(limit, offset, queryParams)

	var r0 []*rooms.RoomEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, url.Values) ([]*rooms.RoomEntity, error)); ok {
		return rf(limit, offset, queryParams)
	}
	if rf, ok := ret.Get(0).(func(int, int, url.Values) []*rooms.RoomEntity); ok {
		r0 = rf(limit, offset, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*rooms.RoomEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, url.Values) error); ok {
		r1 = rf(limit, offset, queryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoomsByUserId provides a mock function with given fields: RoomEntity
func (_m *RoomService_) GetRoomsByUserId(RoomEntity *rooms.RoomEntity) ([]*rooms.RoomEntity, error) {
	ret := _m.Called(RoomEntity)

	var r0 []*rooms.RoomEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(*rooms.RoomEntity) ([]*rooms.RoomEntity, error)); ok {
		return rf(RoomEntity)
	}
	if rf, ok := ret.Get(0).(func(*rooms.RoomEntity) []*rooms.RoomEntity); ok {
		r0 = rf(RoomEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*rooms.RoomEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(*rooms.RoomEntity) error); ok {
		r1 = rf(RoomEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRoom provides a mock function with given fields: RoomEntity
func (_m *RoomService_) RemoveRoom(RoomEntity *rooms.RoomEntity) error {
	ret := _m.Called(RoomEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rooms.RoomEntity) error); ok {
		r0 = rf(RoomEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRoomService_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoomService_ creates a new instance of RoomService_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoomService_(t mockConstructorTestingTNewRoomService_) *RoomService_ {
	mock := &RoomService_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

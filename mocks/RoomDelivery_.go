// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// RoomDelivery_ is an autogenerated mock type for the RoomDelivery_ type
type RoomDelivery_ struct {
	mock.Mock
}

// AddReview provides a mock function with given fields: c
func (_m *RoomDelivery_) AddReview(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddRoom provides a mock function with given fields: c
func (_m *RoomDelivery_) AddRoom(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReviewsByRoomId provides a mock function with given fields: c
func (_m *RoomDelivery_) GetReviewsByRoomId(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRoomByRoomId provides a mock function with given fields: c
func (_m *RoomDelivery_) GetRoomByRoomId(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRooms provides a mock function with given fields: c
func (_m *RoomDelivery_) GetRooms(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRoomsByUserId provides a mock function with given fields: c
func (_m *RoomDelivery_) GetRoomsByUserId(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyRoom provides a mock function with given fields: c
func (_m *RoomDelivery_) ModifyRoom(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRoom provides a mock function with given fields: c
func (_m *RoomDelivery_) RemoveRoom(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRoomDelivery_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoomDelivery_ creates a new instance of RoomDelivery_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoomDelivery_(t mockConstructorTestingTNewRoomDelivery_) *RoomDelivery_ {
	mock := &RoomDelivery_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

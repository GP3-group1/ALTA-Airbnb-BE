// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	images "alta-airbnb-be/features/images"

	mock "github.com/stretchr/testify/mock"
)

// ImageService_ is an autogenerated mock type for the ImageService_ type
type ImageService_ struct {
	mock.Mock
}

// ChangeImage provides a mock function with given fields: userId, imageEntity
func (_m *ImageService_) ChangeImage(userId uint, imageEntity *images.ImageEntity) (*images.ImageEntity, error) {
	ret := _m.Called(userId, imageEntity)

	var r0 *images.ImageEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, *images.ImageEntity) (*images.ImageEntity, error)); ok {
		return rf(userId, imageEntity)
	}
	if rf, ok := ret.Get(0).(func(uint, *images.ImageEntity) *images.ImageEntity); ok {
		r0 = rf(userId, imageEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*images.ImageEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, *images.ImageEntity) error); ok {
		r1 = rf(userId, imageEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImage provides a mock function with given fields: userId, imageEntity
func (_m *ImageService_) CreateImage(userId uint, imageEntity *images.ImageEntity) (*images.ImageEntity, error) {
	ret := _m.Called(userId, imageEntity)

	var r0 *images.ImageEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, *images.ImageEntity) (*images.ImageEntity, error)); ok {
		return rf(userId, imageEntity)
	}
	if rf, ok := ret.Get(0).(func(uint, *images.ImageEntity) *images.ImageEntity); ok {
		r0 = rf(userId, imageEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*images.ImageEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, *images.ImageEntity) error); ok {
		r1 = rf(userId, imageEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveImage provides a mock function with given fields: userId, imageEntity
func (_m *ImageService_) RemoveImage(userId uint, imageEntity *images.ImageEntity) error {
	ret := _m.Called(userId, imageEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *images.ImageEntity) error); ok {
		r0 = rf(userId, imageEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewImageService_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewImageService_ creates a new instance of ImageService_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewImageService_(t mockConstructorTestingTNewImageService_) *ImageService_ {
	mock := &ImageService_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	reservations "alta-airbnb-be/features/reservations"

	mock "github.com/stretchr/testify/mock"
)

// ReservationService is an autogenerated mock type for the ReservationService_ type
type ReservationService struct {
	mock.Mock
}

// CheckReservation provides a mock function with given fields: input, roomID
func (_m *ReservationService) CheckReservation(input reservations.ReservationEntity, roomID uint) (int64, error) {
	ret := _m.Called(input, roomID)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(reservations.ReservationEntity, uint) (int64, error)); ok {
		return rf(input, roomID)
	}
	if rf, ok := ret.Get(0).(func(reservations.ReservationEntity, uint) int64); ok {
		r0 = rf(input, roomID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(reservations.ReservationEntity, uint) error); ok {
		r1 = rf(input, roomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: userID, idParam, inputReservation
func (_m *ReservationService) Create(userID uint, idParam uint, inputReservation reservations.ReservationEntity) (reservations.MidtransResponse, error) {
	ret := _m.Called(userID, idParam, inputReservation)

	var r0 reservations.MidtransResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, reservations.ReservationEntity) (reservations.MidtransResponse, error)); ok {
		return rf(userID, idParam, inputReservation)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, reservations.ReservationEntity) reservations.MidtransResponse); ok {
		r0 = rf(userID, idParam, inputReservation)
	} else {
		r0 = ret.Get(0).(reservations.MidtransResponse)
	}

	if rf, ok := ret.Get(1).(func(uint, uint, reservations.ReservationEntity) error); ok {
		r1 = rf(userID, idParam, inputReservation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: page, limit, userID
func (_m *ReservationService) GetAll(page int, limit int, userID uint) ([]reservations.ReservationEntity, error) {
	ret := _m.Called(page, limit, userID)

	var r0 []reservations.ReservationEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, uint) ([]reservations.ReservationEntity, error)); ok {
		return rf(page, limit, userID)
	}
	if rf, ok := ret.Get(0).(func(int, int, uint) []reservations.ReservationEntity); ok {
		r0 = rf(page, limit, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reservations.ReservationEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, uint) error); ok {
		r1 = rf(page, limit, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReservationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewReservationService creates a new instance of ReservationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReservationService(t mockConstructorTestingTNewReservationService) *ReservationService {
	mock := &ReservationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

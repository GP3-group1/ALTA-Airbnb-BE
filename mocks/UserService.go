// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	users "alta-airbnb-be/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService_ type
type UserService struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *UserService) Create(input users.UserEntity) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.UserEntity) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetData provides a mock function with given fields: userID
func (_m *UserService) GetData(userID uint) (users.UserEntity, error) {
	ret := _m.Called(userID)

	var r0 users.UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (users.UserEntity, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) users.UserEntity); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(users.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *UserService) Login(email string, password string) (users.UserEntity, string, error) {
	ret := _m.Called(email, password)

	var r0 users.UserEntity
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (users.UserEntity, string, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) users.UserEntity); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(users.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ModifyData provides a mock function with given fields: userID, input
func (_m *UserService) ModifyData(userID uint, input users.UserEntity) error {
	ret := _m.Called(userID, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, users.UserEntity) error); ok {
		r0 = rf(userID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyPassword provides a mock function with given fields: userID, input
func (_m *UserService) ModifyPassword(userID uint, input users.UserEntity) error {
	ret := _m.Called(userID, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, users.UserEntity) error); ok {
		r0 = rf(userID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: userID
func (_m *UserService) Remove(userID uint) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBalance provides a mock function with given fields: userID, input
func (_m *UserService) UpdateBalance(userID uint, input users.UserEntity) error {
	ret := _m.Called(userID, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, users.UserEntity) error); ok {
		r0 = rf(userID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
